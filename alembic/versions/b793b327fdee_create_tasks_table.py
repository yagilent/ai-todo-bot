"""Create tasks table

Revision ID: b793b327fdee
Revises: 
Create Date: 2025-04-26 11:44:46.031601

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b793b327fdee'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('tasks',
    sa.Column('task_id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.BigInteger(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('status', sa.String(length=20), server_default='pending', nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('completed_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('due_date', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('original_due_text', sa.String(length=255), nullable=True),
    sa.Column('is_repeating', sa.Boolean(), server_default='false', nullable=False),
    sa.Column('recurrence_rule', sa.String(length=255), nullable=True),
    sa.Column('next_reminder_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('last_reminder_sent_at', sa.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('raw_input', sa.Text(), nullable=True),
    sa.CheckConstraint("status IN ('pending', 'done')", name=op.f('ck_tasks_ck_tasks_status_values')),
    sa.PrimaryKeyConstraint('task_id', name=op.f('pk_tasks'))
    )
    with op.batch_alter_table('tasks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_tasks_due_date'), ['due_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_tasks_next_reminder_at'), ['next_reminder_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_tasks_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_tasks_user_id'), ['user_id'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('tasks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tasks_user_id'))
        batch_op.drop_index(batch_op.f('ix_tasks_status'))
        batch_op.drop_index(batch_op.f('ix_tasks_next_reminder_at'))
        batch_op.drop_index(batch_op.f('ix_tasks_due_date'))

    op.drop_table('tasks')
    # ### end Alembic commands ###
