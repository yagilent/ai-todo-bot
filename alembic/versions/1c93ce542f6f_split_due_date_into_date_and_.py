"""Split due_date into DATE and TIMESTAMPTZ columns

Revision ID: 1c93ce542f6f
Revises: 3ab18eaa41a3
Create Date: 2025-04-28 14:38:25.172926

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '1c93ce542f6f'
down_revision: Union[str, None] = '3ab18eaa41a3'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('tasks', schema=None) as batch_op:
        batch_op.add_column(sa.Column('due_datetime', sa.TIMESTAMP(timezone=True), nullable=True))
        batch_op.alter_column('due_date',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DATE(),
               existing_nullable=True)
        batch_op.create_index(batch_op.f('ix_tasks_due_datetime'), ['due_datetime'], unique=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('tasks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_tasks_due_datetime'))
        batch_op.alter_column('due_date',
               existing_type=sa.DATE(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
        batch_op.drop_column('due_datetime')

    # ### end Alembic commands ###
