# src/scheduler/jobs.py
import logging
import datetime
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession, async_sessionmaker
from aiogram import Bot

from apscheduler.schedulers.asyncio import AsyncIOScheduler

from src.database.models import Task # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Task

logger = logging.getLogger(__name__)

async def check_and_send_reminders(
    bot: Bot,
    session_pool: async_sessionmaker[AsyncSession] # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–±—Ä–∏–∫—É —Å–µ—Å—Å–∏–π
):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∑–∞–¥–∞—á–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –ø–æ–¥–æ—à–ª–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö.
    """
    now_utc = datetime.datetime.now(datetime.timezone.utc)
    logger.debug(f"Running reminder check job at {now_utc}")

    tasks_to_remind: list[Task] = []

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏, –≥–æ—Ç–æ–≤—ã–µ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é
    try:
        async with session_pool() as session: # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
            stmt = select(Task).where(
                Task.status == 'pending',
                Task.next_reminder_at <= now_utc,
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ—Å–ª–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                (Task.last_reminder_sent_at == None) | (Task.last_reminder_sent_at < Task.next_reminder_at) # noqa E711
            ).order_by(Task.next_reminder_at) # –°–æ—Ä—Ç–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ –ø–µ—Ä–≤—ã–º–∏

            result = await session.execute(stmt)
            tasks_to_remind = result.scalars().all()
    except Exception as e:
         logger.error(f"Error fetching tasks for reminders: {e}", exc_info=True)
         return # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ —Å–º–æ–≥–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞—á–∏

    if not tasks_to_remind:
        logger.debug("No tasks found for reminders.")
        return

    logger.info(f"Found {len(tasks_to_remind)} tasks to remind.")

    sent_count = 0
    failed_count = 0
    updated_ids = []

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ë–î
    for task in tasks_to_remind:
        reminder_text = f"üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!**\n\n–ó–∞–¥–∞—á–∞: <i>{task.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}</i>"
        if task.due_date:
             # TODO: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É—á–µ—Ç–æ–º –µ–≥–æ —Ç–∞–π–º–∑–æ–Ω—ã
             due_date_str = task.due_date.strftime('%Y-%m-%d %H:%M') + " UTC" # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ UTC
             reminder_text += f"\n–°—Ä–æ–∫: {due_date_str}"
        reminder_text += f"\n\n(ID: {task.task_id})"
        

        try:
            # TODO: –î–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ (BotBlocked, etc.)
            await bot.send_message(chat_id=task.user_telegram_id, text=reminder_text)
            logger.info(f"Sent reminder for task {task.task_id} to user {task.user_telegram_id}")
            updated_ids.append(task.task_id) # –î–æ–±–∞–≤–ª—è–µ–º ID –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –ë–î
            sent_count += 1
        except Exception as e:
             logger.error(f"Failed to send reminder for task {task.task_id} to user {task.user_telegram_id}: {e}")
             failed_count += 1
             # TODO: –†–µ—à–∏—Ç—å, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å –∑–∞–¥–∞—á–∞–º–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
             # (–ø–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∑–∂–µ, –ø–æ–º–µ—Ç–∏—Ç—å –∫–∞–∫ –æ—à–∏–±–∫—É –∏ —Ç.–¥.)

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –≤ –ë–î –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if updated_ids:
        try:
             async with session_pool() as session:
                 # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω—É–ª—è–µ–º next_reminder_at ---
                 stmt_update = update(Task).where(Task.task_id.in_(updated_ids)).values(
                     last_reminder_sent_at=now_utc,
                     next_reminder_at=None # –û–±–Ω—É–ª—è–µ–º, —á—Ç–æ–±—ã –Ω–µ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Å–Ω–æ–≤–∞ (–ø–æ–∫–∞ –Ω–µ—Ç –ª–æ–≥–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤)
                 )
                 await session.execute(stmt_update)
                 await session.commit()
                 logger.info(f"Updated last_reminder_sent_at for {len(updated_ids)} tasks.")
        except Exception as e:
             logger.error(f"Error updating tasks after sending reminders: {e}", exc_info=True)

    logger.debug(f"Reminder job finished. Sent: {sent_count}, Failed: {failed_count}")


def register_jobs(
    scheduler: AsyncIOScheduler,
    bot: Bot,
    session_pool: async_sessionmaker[AsyncSession]
    ):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ."""
    try:
        scheduler.add_job(
            check_and_send_reminders,
            trigger='interval',
            minutes=1, # –ó–∞–ø—É—Å–∫–∞—Ç—å –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É (–º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å)
            id='reminder_check_job', # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–∂–æ–±—ã
            replace_existing=True, # –ó–∞–º–µ–Ω—è—Ç—å –¥–∂–æ–±—É, –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ –µ—Å—Ç—å
            kwargs={'bot': bot, 'session_pool': session_pool} # –ü–µ—Ä–µ–¥–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        )
        logger.info("Job 'check_and_send_reminders' scheduled to run every 1 minute.")
    except Exception as e:
        logger.error(f"Error scheduling reminder job: {e}", exc_info=True)