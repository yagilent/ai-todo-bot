# src/bot.py

import asyncio
import logging
import sys

import pendulum

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
# –ó–ê–ì–õ–£–®–ö–ê: –£–±–µ—Ä–∏/–Ω–∞—Å—Ç—Ä–æ–π, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å –¥—Ä—É–≥–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ FSM
# from aiogram.fsm.storage.memory import MemoryStorage

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫
from src.config import settings

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã

from src.tgbot.handlers.nlp_handler import nlp_router

from src.tgbot.handlers.find_tasks_commands import find_commands_router

from src.tgbot.handlers.task_manage import task_manage_router

from src.scheduler.scheduler_setup import setup_scheduler, shutdown_scheduler, scheduler # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∞–º –æ–±—ä–µ–∫—Ç scheduler
from src.scheduler.jobs import register_jobs

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ SQLAlchemy –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–µ—Å—Å–∏–π
from src.database.db_session import lifespan_startup, lifespan_shutdown, sessionmanager

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Middleware –¥–ª—è —Å–µ—Å—Å–∏–π –ë–î
from src.tgbot.middlewares.db_middleware import DbSessionMiddleware

logger = logging.getLogger(__name__)

# --- –§—É–Ω–∫—Ü–∏–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞ ---
async def set_bot_commands(bot: Bot):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, –≤–∏–¥–∏–º—ã–µ –≤ –º–µ–Ω—é Telegram."""
    commands = [
        types.BotCommand(command="/today", description="–ó–∞–¥–∞—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
        types.BotCommand(command="/tomorrow", description="–ó–∞–¥–∞—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞"),
        types.BotCommand(command="/all", description="–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏"),
        types.BotCommand(command="/allrec", description="üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è –∑–∞–¥–∞—á–∏"),
    ]
    try:
        await bot.set_my_commands(commands, scope=types.BotCommandScopeDefault())
        logger.info("Bot commands set successfully.")
    except Exception as e:
        logger.error(f"Failed to set bot commands: {e}")

async def on_startup(bot: Bot, dispatcher: Dispatcher):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞: –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î, —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥."""
    logger.warning("--- Starting Bot ---")
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Å–µ—Å—Å–∏–π –ë–î (–¥–≤–∏–∂–æ–∫ –∏ —Ñ–∞–±—Ä–∏–∫–∞)
        await lifespan_startup()
    except Exception as e:
        logger.critical(f"Bot startup failed due to DB init error: {e}", exc_info=True)
        sys.exit("Critical: Could not initialize database session manager.")


    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
        await setup_scheduler() # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç scheduler
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –¥–∂–æ–±—ã, –ø–µ—Ä–µ–¥–∞–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
        register_jobs(scheduler, bot, sessionmanager.session_factory)
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –ü–û–°–õ–ï —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–∂–æ–±–æ–≤
        scheduler.start()
        logger.info("Scheduler started successfully.")
    except Exception as e:
         logger.error(f"Failed to setup or start scheduler: {e}", exc_info=True)
         # –†–µ—à–∏—Ç—å, –∫—Ä–∏—Ç–∏—á–Ω–æ –ª–∏ —ç—Ç–æ –¥–ª—è —Å—Ç–∞—Ä—Ç–∞ –±–æ—Ç–∞? –ü–æ–∫–∞ –Ω–µ—Ç.


    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –≤ –º–µ–Ω—é Telegram
    await set_bot_commands(bot)
    logger.warning("--- Bot has been started successfully ---")

async def on_shutdown(dispatcher: Dispatcher):
    """–î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –±–æ—Ç–∞: –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π."""
    logger.warning("--- Shutting down Bot ---")
    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å –ë–î
    await lifespan_shutdown()

    await shutdown_scheduler()

    # –ó–∞–∫—Ä—ã—Ç–∏–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ FSM (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–µ MemoryStorage)
    try:
        if dispatcher.storage and hasattr(dispatcher.storage, 'close'):
             await dispatcher.storage.close()
             logger.info("FSM storage closed.")
    except Exception as e:
        logger.error(f"Error closing FSM storage: {e}", exc_info=True)

    logger.warning("--- Bot has been shut down ---")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    logger.info("Initializing bot application...")

    try:
        pendulum.set_locale('ru')
        logger.info(f"Pendulum locale set to '{pendulum.get_locale()}'.")
    except Exception as e:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –ª–æ–∫–∞–ª—å 'ru' –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è —Å–∏—Å—Ç–µ–º–æ–π
        logger.warning(f"Could not set Pendulum locale to 'ru': {e}. Using default.")

    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Bot, –∏—Å–ø–æ–ª—å–∑—É—è —Ç–æ–∫–µ–Ω –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    # –û–±—Ä–∞—Ç–∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∏–º—è –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –≤ Settings: telegram_bot_token
    bot = Bot(token=settings.telegram_bot_token,
              default=DefaultBotProperties(parse_mode=ParseMode.HTML))

    # –°–æ–∑–¥–∞–µ–º Dispatcher (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å MemoryStorage –¥–ª—è FSM)
    # storage = MemoryStorage()
    # dp = Dispatcher(storage=storage)
    dp = Dispatcher()

    # --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Middleware ---
    # DbSessionMiddleware –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–µ—Å—Å–∏—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–ø–¥–µ–π—Ç–∞
    session_middleware = DbSessionMiddleware(session_pool=sessionmanager.session_factory)
    dp.update.middleware(session_middleware)
    logger.info("DbSessionMiddleware registered.")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    dp.include_router(find_commands_router)
    dp.include_router(nlp_router)
    dp.include_router(task_manage_router) 
    logger.info("Routers included.")

    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∞–ø–¥–µ–π—Ç—ã, —á—Ç–æ–±—ã –±–æ—Ç –Ω–µ –æ—Ç–≤–µ—á–∞–ª –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è,
    # –ø—Ä–∏—à–µ–¥—à–∏–µ –≤–æ –≤—Ä–µ–º—è –µ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    try:
        await bot.delete_webhook(drop_pending_updates=True)
        logger.debug("Dropped pending updates.")
    except Exception as e:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É, –µ—Å–ª–∏ –≤–µ–±—Ö—É–∫ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        logger.warning(f"Could not delete webhook (maybe not set): {e}")

    # –ó–∞–ø—É—Å–∫–∞–µ–º long polling
    logger.info("Starting polling...")
    try:
        # allowed_updates –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏, –Ω–æ –ø–æ–∫–∞ –ø–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ç–∏–ø—ã
        await dp.start_polling(bot, allowed_updates=dp.resolve_used_update_types())
    except Exception as e:
        logger.critical(f"Unhandled exception during polling: {e}", exc_info=True)
    finally:
        # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –±–æ—Ç–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
        logger.warning("Closing bot session...")
        await bot.session.close()
        logger.warning("Bot session closed.")


if __name__ == '__main__':
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å Loguru)
    # logging.basicConfig(level=settings.log_level.upper(), format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ –≤ config.py –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ settings

    # –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ main
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped by user or system signal.")
    except Exception as e:
        # –õ–æ–≤–∏–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –Ω–∞ —Å–∞–º–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É—Ä–æ–≤–Ω–µ
        logger.critical(f"Critical error during bot execution: {e}", exc_info=True)
        sys.exit(1) # –í—ã—Ö–æ–¥ —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏