# src/tgbot/responses.py

import logging
from typing import Optional
from aiogram import types, Bot
import pendulum # –î–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏ –¥–ª—è —Ç–∞–π–ø-—Ö–∏–Ω—Ç–æ–≤
from src.database.models import Task, User

from src.utils.formatters import format_datetime_human

logger = logging.getLogger(__name__)

# --- –ù–û–í–ê–Ø –§—É–Ω–∫—Ü–∏—è –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –î–µ–π—Å—Ç–≤–∏–π —Å –ó–∞–¥–∞—á–µ–π ---
async def send_task_operation_confirmation(
    message: types.Message,
    action_title: str, # –ß—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ: "–ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞", "–°—Ä–æ–∫ –∏–∑–º–µ–Ω–µ–Ω" –∏ —Ç.–¥.
    task: Task, # –û–±—ä–µ–∫—Ç –∑–∞–¥–∞—á–∏ (—É–∂–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–ª–∏ –Ω–æ–≤—ã–π)
    user: User # –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω—É–∂–µ–Ω –¥–ª—è —Ç–∞–π–º–∑–æ–Ω—ã)
):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∑–∞–¥–∞—á–µ–π.
    """
    user_timezone = user.timezone # –ë–µ—Ä–µ–º —Ç–∞–π–º–∑–æ–Ω—É –∏–∑ –æ–±—ä–µ–∫—Ç–∞ User

    response_lines = []
    if action_title and action_title != "":
        status_icon = "‚úÖ" # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≥–∞–ª–æ—á–∫—É –¥–ª—è –≤—Å–µ—Ö —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
        # –°–æ–±–∏—Ä–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response_lines = [
            f"{status_icon} {action_title}"
        ]

    title_to_show = task.title
    desc_to_show =  task.description
    response_lines.append(f"\n<b>{title_to_show}.</b> {desc_to_show}")



    due_date_value = task.due_datetime if task.has_time else task.due_date
    is_overdue = False # –§–ª–∞–≥ –ø—Ä–æ—Å—Ä–æ—á–∫–∏
    date_time_text = ""

    if due_date_value:
        formatted_due = format_datetime_human(
            date=task.due_date,
            date_time=task.due_datetime,
            has_time=task.has_time,
            timezone=user_timezone
        )

        if formatted_due:
            # --- –ü–†–û–í–ï–†–ö–ê –ù–ê –ü–†–û–°–†–û–ß–ö–£ ---
            try:
                now_local = pendulum.now(user_timezone)
                due_moment_local: pendulum.DateTime = None

                if task.has_time and task.due_datetime:
                    # –î–ª—è datetime —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —Ç–µ–∫—É—â–∏–º –º–æ–º–µ–Ω—Ç–æ–º
                    due_moment_local = pendulum.instance(task.due_datetime).in_timezone(user_timezone)
                    if due_moment_local < now_local:
                         is_overdue = True
                elif not task.has_time and task.due_date:
                     # –î–ª—è date —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –¥–∞—Ç—É (—Å—á–∏—Ç–∞–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º, –µ—Å–ª–∏ —Å–µ–≥–æ–¥–Ω—è —É–∂–µ –ü–û–°–õ–ï —ç—Ç–æ–π –¥–∞—Ç—ã)
                     date_local = pendulum.Date(task.due_date.year, task.due_date.month, task.due_date.day)
                     if date_local < now_local.date():
                          is_overdue = True

                if is_overdue:
                    logger.debug(f"Task {task.task_id} is overdue. Due: {due_moment_local or date_local}, Now: {now_local}")
            except Exception as e:
                 logger.error(f"Error checking overdue status for task {task.task_id}: {e}")
            # --- –ö–û–ù–ï–¶ –ü–†–û–í–ï–†–ö–ò –ù–ê –ü–†–û–°–†–û–ß–ö–£ ---

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
            due_prefix = "‚ùóÔ∏è<b>–°—Ä–æ–∫ –ò–°–¢–ï–ö:</b>" if is_overdue else "üìÖ " # –î–æ–±–∞–≤–∏–º –∂–∏—Ä–Ω–æ—Å—Ç—å –∫ –ø—Ä–µ—Ñ–∏–∫—Å—É
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¢–û–õ–¨–ö–û –∂–∏—Ä–Ω–æ—Å—Ç—å, –µ—Å–ª–∏ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ
            formatted_string = f'<b>{formatted_due}</b>' if is_overdue else formatted_due
            date_time_text = f"\n{due_prefix} {formatted_string}"

    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
    if task.next_reminder_at:
        formatted_reminder = format_datetime_human(None, task.next_reminder_at, True, user_timezone)
        if formatted_reminder:
            date_time_text += f" üîî {formatted_reminder}"

    
    response_lines.append(date_time_text)
    # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º ID
    response_lines.append(f"(ID: {task.task_id})")

    response_text = "\n".join(response_lines)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        await message.answer(response_text)
    except Exception as e:
        # –õ–æ–≤–∏–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–æ–±—â–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ)
        logger.error(f"Failed to send task confirmation reply to user {message.from_user.id}: {e}")
        # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        try:
            await message.answer(response_text)
        except Exception as e2:
             logger.error(f"Failed to send task confirmation answer to user {message.from_user.id}: {e2}")

async def send_reminder_notification(
    bot: Bot, # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –æ–±—ä–µ–∫—Ç Bot
    task: Task,
    user: User # –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–∞–π–º–∑–æ–Ω—ã
    ):
    """
    –§–æ—Ä–º–∏—Ä—É–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ-–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    """
    user_timezone = user.timezone
    logger.info(f"Sending reminder for task {task.task_id} to user {user.telegram_id}")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_lines = ["üîî **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!**\n"]
    title_safe = f"<b>{task.title}</b>: " if task.title else ""
    description_safe = task.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'
    reminder_lines.append(f"\n{title_safe}<i>{description_safe}</i>")

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å—Ä–æ–∫
    formatted_due = format_datetime_human(
        date=task.due_date,
        date_time=task.due_datetime,
        has_time=task.has_time,
        timezone=user_timezone
    )
    if formatted_due:
        reminder_lines.append(f"\nüìÖ –°—Ä–æ–∫: {formatted_due}")

    reminder_lines.append(f"\n\n(ID: {task.task_id})") # ID –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ —Ä–µ–ø–ª–∞—è
    reminder_text = "\n".join(reminder_lines)

    # TODO: –°–æ–∑–¥–∞—Ç—å –∏ –¥–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ ("–°–¥–µ–ª–∞–Ω–æ", "–û—Ç–ª–æ–∂–∏—Ç—å...")
    # keyboard = create_reminder_keyboard(task.task_id)
    keyboard = None # –ü–æ–∫–∞ –±–µ–∑ –∫–Ω–æ–ø–æ–∫

    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º bot.send_message
        await bot.send_message(
            chat_id=user.telegram_id, # –ë–µ—Ä–µ–º ID –∏–∑ –æ–±—ä–µ–∫—Ç–∞ user
            text=reminder_text,
            reply_markup=keyboard
            )
        logger.info(f"Successfully sent reminder for task {task.task_id} to user {user.telegram_id}")
        return True # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—Ö
    except Exception as e:
        # TODO: –ë–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ (BotBlocked, UserDeactivated etc.)
        logger.error(f"Failed to send reminder notification for task {task.task_id} to user {user.telegram_id}: {e}")
        return False # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–µ—É—Å–ø–µ—Ö