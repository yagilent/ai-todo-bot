# src/tgbot/keyboards/inline.py
from typing import List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.database.models import Task, User

from src.utils.formatters import format_reminder_time_human

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–∫–∞ –Ω–µ –Ω—É–∂–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ---
# TASK_STATUS_TOGGLE_PREFIX = "toggle_status:"
# –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É callback_data
TASK_BUTTON_CALLBACK_DUMMY = "task_button_pressed" # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ ID: f"task:{task.task_id}"

TASK_VIEW_PREFIX = "view_task:"

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
REMINDER_COMPLETE_PREFIX = "reminder_complete:"
REMINDER_SNOOZE_HOUR_PREFIX = "reminder_snooze_hour:"  
REMINDER_SNOOZE_TOMORROW_PREFIX = "reminder_snooze_tomorrow:"

def create_tasks_keyboard(tasks: List[Task], db_user: User) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —á–µ–∫–±–æ–∫—Å–∞–º–∏.
    Callback_data –ø–æ–∫–∞ –Ω–µ –Ω–µ—Å–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏.
    """
    builder = InlineKeyboardBuilder()

    if not tasks:
         return builder.as_markup()

    for task in tasks:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —á–µ–∫–±–æ–∫—Å–∞
        status_icon = "‚úÖ" if task.status == 'done' else "‚òê"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ

        task_title = ""
        if task.title:
            task_title = task.title
        else:
            task_title = task.description[:30]

        task_date_time_text = ""

        # –£–ü–†–û–©–ï–ù–ò–ï: –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è)
        if (task.status == 'done'):
            task_date_time_text = "‚úÖ"
        elif task.next_reminder_at:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            try:
                import pendulum
                now_local = pendulum.now(db_user.timezone)
                reminder_local = pendulum.instance(task.next_reminder_at).in_timezone(db_user.timezone)
                is_overdue = reminder_local < now_local
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                notification_datetime = format_reminder_time_human(task.next_reminder_at, db_user.timezone)
                if notification_datetime:
                    # –í—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É: –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫ –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ
                    reminder_icon = "üîï" if is_overdue else "üîî"
                    task_date_time_text = reminder_icon + notification_datetime
                else:
                    # –ï—Å–ª–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –≤—Å—ë —Ä–∞–≤–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è —Å –∏–∫–æ–Ω–∫–æ–π
                    reminder_icon = "üîï" if is_overdue else "üîî"
                    fallback_time = reminder_local.format("DD.MM HH:mm")
                    task_date_time_text = reminder_icon + fallback_time
            except Exception:
                # Fallback –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ö–æ—Ç—è –±—ã –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                try:
                    fallback_time = task.next_reminder_at.strftime("%d.%m %H:%M")
                    task_date_time_text = "üîî" + fallback_time
                except Exception:
                    task_date_time_text = "üîî"
        else:
            # –ù–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫
            task_date_time_text = "üîï"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–∫–æ–Ω–∫—É –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –µ—Å–ª–∏ –µ—Å—Ç—å RRULE
        repeat_icon = "üîÑ" if task.recurrence_rule else ""
        
        button_text = f"{task_title} {task_date_time_text}{repeat_icon}"
        
        # –ò–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å:
        # text_part = task.title if task.title else task.description
        # text_part_short = text_part[:40] + ("..." if len(text_part) > 40 else "")
        # button_text = f"{status_icon} {text_part_short}"


        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π callback_data ---
        # –ü—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π, –Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º—ã –Ω–µ –ø–∏—à–µ–º
        # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID, —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º –±—ã–ª–æ –ø—Ä–æ—â–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É
        #callback_data = f"task_view:{task.task_id}" # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/–¥–µ–π—Å—Ç–≤–∏—è
        callback_data = f"{TASK_VIEW_PREFIX}{task.task_id}"
        # –ò–ª–∏ –æ–±—â–∞—è –∑–∞–≥–ª—É—à–∫–∞:
        # callback_data = TASK_BUTTON_CALLBACK_DUMMY
        # ---------------------------------------------------

        builder.row(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, "–í—ã–±—Ä–∞—Ç—å"

    return builder.as_markup()


def create_task_actions_keyboard(task_id: int, context: str = "reminder") -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏ –¥–ª—è –∑–∞–¥–∞—á–∏.
    
    Args:
        task_id: ID –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–æ—Ç–æ—Ä–æ–π —Å–æ–∑–¥–∞–µ—Ç—Å—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
        context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ("reminder" –∏–ª–∏ "view")
        
    Returns:
        InlineKeyboardMarkup —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    """
    builder = InlineKeyboardBuilder()
    
    # –ö–Ω–æ–ø–∫–∞ "–°–¥–µ–ª–∞–Ω–æ" - –æ—Ç–º–µ—á–∞–µ—Ç –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
    builder.row(InlineKeyboardButton(
        text="‚úÖ –°–¥–µ–ª–∞–Ω–æ",
        callback_data=f"{REMINDER_COMPLETE_PREFIX}{task_id}"
    ))
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ —á–∞—Å"
    builder.row(InlineKeyboardButton(
        text="‚è∞ –ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ —á–∞—Å",
        callback_data=f"{REMINDER_SNOOZE_HOUR_PREFIX}{task_id}"
    ))
    
    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞"
    builder.row(InlineKeyboardButton(
        text="üìÖ –ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞",
        callback_data=f"{REMINDER_SNOOZE_TOMORROW_PREFIX}{task_id}"
    ))
    
    return builder.as_markup()


def create_reminder_keyboard(task_id: int) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–µ.
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
    """
    return create_task_actions_keyboard(task_id, "reminder")