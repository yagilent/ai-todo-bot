# src/tgbot/keyboards/inline.py
from typing import List
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from src.database.models import Task, User

from src.utils.formatters import format_datetime_human

# --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ü–æ–∫–∞ –Ω–µ –Ω—É–∂–µ–Ω –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ---
# TASK_STATUS_TOGGLE_PREFIX = "toggle_status:"
# –í–º–µ—Å—Ç–æ —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É callback_data
TASK_BUTTON_CALLBACK_DUMMY = "task_button_pressed" # –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ ID: f"task:{task.task_id}"

TASK_VIEW_PREFIX = "view_task:"

def create_tasks_keyboard(tasks: List[Task], db_user: User) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–¥–∞—á –∏ –≤–∏–∑—É–∞–ª—å–Ω—ã–º–∏ —á–µ–∫–±–æ–∫—Å–∞–º–∏.
    Callback_data –ø–æ–∫–∞ –Ω–µ –Ω–µ—Å–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏.
    """
    builder = InlineKeyboardBuilder()

    if not tasks:
         return builder.as_markup()

    for task in tasks:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —á–µ–∫–±–æ–∫—Å–∞
        status_icon = "‚úÖ" if task.status == 'done' else "‚òê"

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ (–æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫)
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ, –æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ –¥–ª–∏–Ω–Ω–æ–µ

        task_title = ""
        if task.title:
            task_title = task.title
        else:
            task_title = task.description[:30]

        task_date_time_text = ""

        due_datetime = format_datetime_human(task.due_date, task.due_datetime, task.has_time, db_user.timezone)
        notification_datetime = format_datetime_human(None, task.next_reminder_at, True, db_user.timezone)

        if (task.status == 'done'):
            task_date_time_text = "‚úÖ"
        elif (task.has_time and due_datetime):
            task_date_time_text = "‚è±Ô∏è" + due_datetime
        elif (not notification_datetime and not task.has_time and due_datetime):
            task_date_time_text = "üóì" + due_datetime +" üîï"
        elif (notification_datetime):
            task_date_time_text = "üîî" + notification_datetime

        
        button_text = f"{task_title} {task_date_time_text}"
        
        # –ò–ª–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å:
        # text_part = task.title if task.title else task.description
        # text_part_short = text_part[:40] + ("..." if len(text_part) > 40 else "")
        # button_text = f"{status_icon} {text_part_short}"


        # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π callback_data ---
        # –ü—Ä–æ—Å—Ç–æ —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π, –Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º—ã –Ω–µ –ø–∏—à–µ–º
        # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID, —á—Ç–æ–±—ã –≤ –±—É–¥—É—â–µ–º –±—ã–ª–æ –ø—Ä–æ—â–µ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É
        #callback_data = f"task_view:{task.task_id}" # –ü—Ä–µ—Ñ–∏–∫—Å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞/–¥–µ–π—Å—Ç–≤–∏—è
        callback_data = f"{TASK_VIEW_PREFIX}{task.task_id}"
        # –ò–ª–∏ –æ–±—â–∞—è –∑–∞–≥–ª—É—à–∫–∞:
        # callback_data = TASK_BUTTON_CALLBACK_DUMMY
        # ---------------------------------------------------

        builder.row(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    # TODO: –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏, "–í—ã–±—Ä–∞—Ç—å"

    return builder.as_markup()