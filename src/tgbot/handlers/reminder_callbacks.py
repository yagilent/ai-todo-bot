# src/tgbot/handlers/reminder_callbacks.py

import logging
import pendulum
from aiogram import Router, types, F
from sqlalchemy.ext.asyncio import AsyncSession

from src.database.crud import get_or_create_user, update_task_status, update_task_reminder_time
from src.tgbot.keyboards.inline import (
    REMINDER_COMPLETE_PREFIX,
    REMINDER_SNOOZE_HOUR_PREFIX, 
    REMINDER_SNOOZE_TOMORROW_PREFIX
)

logger = logging.getLogger(__name__)
reminder_callbacks_router = Router(name="reminder_callbacks")


@reminder_callbacks_router.callback_query(F.data.startswith(REMINDER_COMPLETE_PREFIX))
async def handle_reminder_complete(callback: types.CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–°–¥–µ–ª–∞–Ω–æ' –≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏."""
    try:
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
        task_id = int(callback.data.replace(REMINDER_COMPLETE_PREFIX, ""))
        
        user = await get_or_create_user(
            session, 
            callback.from_user.id, 
            callback.from_user.full_name, 
            callback.from_user.username
        )
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
            return

        # –û—Ç–º–µ—á–∞–µ–º –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é
        updated_task = await update_task_status(session, task_id, 'done')
        success = updated_task is not None
        
        if success:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—á–∞–ª–æ, ID –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ
            new_text = "‚úÖ <b>–ó–ê–î–ê–ß–ê –í–´–ü–û–õ–ù–ï–ù–ê</b>\n\n" + callback.message.text
            await callback.message.edit_text(
                text=new_text,
                reply_markup=None,  # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
                parse_mode="HTML"
            )
            await callback.answer("–ó–∞–¥–∞—á–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è! üéâ")
            logger.info(f"Task {task_id} marked as complete by user {user.telegram_id}")
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é", show_alert=True)
            
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID –∑–∞–¥–∞—á–∏", show_alert=True)
    except Exception as e:
        logger.error(f"Error handling reminder complete callback: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@reminder_callbacks_router.callback_query(F.data.startswith(REMINDER_SNOOZE_HOUR_PREFIX))
async def handle_reminder_snooze_hour(callback: types.CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–ø–æ–º–Ω–∏ —á–µ—Ä–µ–∑ —á–∞—Å'."""
    try:
        task_id = int(callback.data.replace(REMINDER_SNOOZE_HOUR_PREFIX, ""))
        
        user = await get_or_create_user(
            session,
            callback.from_user.id,
            callback.from_user.full_name,
            callback.from_user.username
        )
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ —á–∞—Å –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∑–æ–Ω–µ
        now_local = pendulum.now(user.timezone)
        reminder_time = now_local.add(hours=1).in_timezone('UTC')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        updated_task = await update_task_reminder_time(session, task_id, reminder_time)
        success = updated_task is not None
        
        if success:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—á–∞–ª–æ
            status_text = f"‚è∞ <b>–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ —á–∞—Å</b> ({now_local.add(hours=1).format('HH:mm')})"
            new_text = status_text + "\n\n" + callback.message.text
            await callback.message.edit_text(
                text=new_text,
                reply_markup=None,
                parse_mode="HTML"
            )
            await callback.answer("–ù–∞–ø–æ–º–Ω—é —á–µ—Ä–µ–∑ —á–∞—Å! ‚è∞")
            logger.info(f"Task {task_id} rescheduled for 1 hour by user {user.telegram_id}")
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", show_alert=True)
            
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID –∑–∞–¥–∞—á–∏", show_alert=True)
    except Exception as e:
        logger.error(f"Error handling reminder snooze hour callback: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)


@reminder_callbacks_router.callback_query(F.data.startswith(REMINDER_SNOOZE_TOMORROW_PREFIX))
async def handle_reminder_snooze_tomorrow(callback: types.CallbackQuery, session: AsyncSession):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–ù–∞–ø–æ–º–Ω–∏ –∑–∞–≤—Ç—Ä–∞'."""
    try:
        task_id = int(callback.data.replace(REMINDER_SNOOZE_TOMORROW_PREFIX, ""))
        
        user = await get_or_create_user(
            session,
            callback.from_user.id,
            callback.from_user.full_name,
            callback.from_user.username
        )
        
        if not user:
            await callback.answer("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", show_alert=True)
            return

        # –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è –∑–∞–≤—Ç—Ä–∞ –≤ —Ç–æ –∂–µ –≤—Ä–µ–º—è –≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∑–æ–Ω–µ
        now_local = pendulum.now(user.timezone)
        reminder_time = now_local.add(days=1).in_timezone('UTC')
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        updated_task = await update_task_reminder_time(session, task_id, reminder_time)
        success = updated_task is not None
        
        if success:
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –Ω–∞—á–∞–ª–æ
            tomorrow_time = now_local.add(days=1).format('DD.MM –≤ HH:mm')
            status_text = f"üìÖ <b>–ù–∞–ø–æ–º–Ω—é –∑–∞–≤—Ç—Ä–∞</b> ({tomorrow_time})"
            new_text = status_text + "\n\n" + callback.message.text
            await callback.message.edit_text(
                text=new_text,
                reply_markup=None,
                parse_mode="HTML"
            )
            await callback.answer("–ù–∞–ø–æ–º–Ω—é –∑–∞–≤—Ç—Ä–∞! üìÖ")
            logger.info(f"Task {task_id} rescheduled for tomorrow by user {user.telegram_id}")
        else:
            await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ", show_alert=True)
            
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ ID –∑–∞–¥–∞—á–∏", show_alert=True)
    except Exception as e:
        logger.error(f"Error handling reminder snooze tomorrow callback: {e}", exc_info=True)
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)