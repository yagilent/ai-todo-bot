# src/tgbot/handlers/nlp_handler.py

import logging
from typing import Optional
from aiogram import F, Router, types
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

# –ò–º–ø–æ—Ä—Ç—ã
from src.llm.gemini_client import process_user_input
from src.database.crud import get_or_create_user
from src.utils.parsers import extract_task_id_from_text

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∏–Ω—Ç–µ–Ω—Ç–∞
from .intent_handlers import (
    handle_add_task,
    handle_find_tasks,
    handle_update_timezone,
    handle_complete_task,
    handle_reschedule_task,
    handle_edit_task_description,
    handle_snooze_task,
    handle_clarification_request,
    handle_unknown_intent,
    handle_error_intent
)

logger = logging.getLogger(__name__)
nlp_router = Router(name="nlp_handlers")

# –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã, —Ç—Ä–µ–±—É—é—â–∏–µ ID –∑–∞–¥–∞—á–∏
CONTEXTUAL_INTENTS = {
    "complete_task",
    "reschedule_task",
    "edit_task_description",
    "snooze_task",
}

@nlp_router.message(F.text, ~F.text.startswith('/'))
async def handle_natural_language_query(
    message: types.Message,
    state: FSMContext, # –ö–æ–Ω—Ç–µ–∫—Å—Ç FSM (–ø–æ–∫–∞ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–æ –¥–ª—è —ç—Ç–æ–≥–æ —Ö–µ–Ω–¥–ª–µ—Ä–∞)
    session: AsyncSession # –ò–Ω–∂–µ–∫—Ç–∏—Ä—É–µ—Ç—Å—è middleware
):
    """
    –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞: –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–∞–º–µ—Ä–µ–Ω–∏–µ, –∏–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç (task_id –∏–∑ —Ä–µ–ø–ª–∞—è)
    –∏ –ø–µ—Ä–µ–¥–∞–µ—Ç —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —Ñ—É–Ω–∫—Ü–∏—è–º.
    """
    user = message.from_user
    user_telegram_id = user.id
    user_text = message.text
    context_task_id: Optional[int] = None # ID –∑–∞–¥–∞—á–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ —Ä–µ–ø–ª–∞—è

    logger.info(f"Processing NLP query from user {user_telegram_id}. Text: '{user_text[:100]}...'")

    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–ø–ª–∞–π –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ ID
        if message.reply_to_message and message.reply_to_message.from_user.is_bot:
            replied_text = message.reply_to_message.text or message.reply_to_message.caption
            context_task_id = extract_task_id_from_text(replied_text)
            if context_task_id:
                logger.info(f"Detected reply context with task_id: {context_task_id}")
            else:
                logger.debug("Reply detected, but no task ID found.")

        # –ü–æ–ª—É—á–∞–µ–º/—Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω—É–∂–µ–Ω –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∏ ID)
        db_user = await get_or_create_user(session, user_telegram_id, user.full_name, user.username)
        if not db_user:
            logger.error(f"Failed to get or create user {user_telegram_id} in NLP handler.")
            await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /start.")
            return

        # –í—ã–∑–æ–≤ LLM –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –Ω–∞–º–µ—Ä–µ–Ω–∏—è (—Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏)
        is_reply = context_task_id is not None
        user_timezone = db_user.timezone if db_user.timezone else "Europe/Moscow"
        llm_result = await process_user_input(user_text, is_reply=is_reply, user_timezone=user_timezone)
        logger.debug(f"LLM intent result for user {user_telegram_id}: {llm_result}")

        status = llm_result.get("status")
        intent = llm_result.get("intent")
        params = llm_result.get("params", {})

        # –î–∏—Å–ø–µ—Ç—á–µ—Ä–∏–∑–∞—Ü–∏—è –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É LLM
        if status == "success":
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤
            if intent in CONTEXTUAL_INTENTS:
                if context_task_id:
                    # –í—ã–∑—ã–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø–µ—Ä–µ–¥–∞–≤–∞—è ID
                    if intent == "complete_task":
                        await handle_complete_task(message, session, db_user, context_task_id)
                    elif intent == "reschedule_task":
                        await handle_reschedule_task(message, session, db_user, params, context_task_id)
                    elif intent == "edit_task_description":
                        await handle_edit_task_description(message, session, db_user, params, context_task_id)
                    elif intent == "snooze_task":
                        await handle_snooze_task(message, session, db_user, params, context_task_id)
                    # –î–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–µ –∏–Ω—Ç–µ–Ω—Ç—ã –∑–¥–µ—Å—å, –µ—Å–ª–∏ –ø–æ—è–≤—è—Ç—Å—è
                else:
                    # –ò–Ω—Ç–µ–Ω—Ç —Ç—Ä–µ–±—É–µ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞, –Ω–æ –µ–≥–æ –Ω–µ—Ç
                    logger.warning(f"Contextual intent '{intent}' received without valid reply/task_id for user {user_telegram_id}")
                    await message.reply(
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é '–û—Ç–≤–µ—Ç–∏—Ç—å' (Reply) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å –∑–∞–¥–∞—á–µ–π (—É –Ω–µ–≥–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å ID –≤ —Å–∫–æ–±–∫–∞—Ö), "
                        "—á—Ç–æ–±—ã —è –ø–æ–Ω—è–ª, –∫ –∫–∞–∫–æ–π –∏–º–µ–Ω–Ω–æ –∑–∞–¥–∞—á–µ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—É."
                    )
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã—Ö –∏–Ω—Ç–µ–Ω—Ç–æ–≤
            elif intent == "add_task":
                # –ü–µ—Ä–µ–¥–∞–µ–º state, —Ç.–∫. —ç—Ç–æ—Ç —Ö–µ–Ω–¥–ª–µ—Ä –º–æ–∂–µ—Ç –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å FSM –¥–ª—è —Ç–∞–π–º–∑–æ–Ω—ã
                await handle_add_task(message, session, db_user, params)
            elif intent == "find_tasks":
                await handle_find_tasks(message, session, db_user, params)
            elif intent == "update_timezone":
                await handle_update_timezone(message, session, db_user, params)
            else:
                # –£—Å–ø–µ—à–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –Ω–æ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–Ω—Ç–µ–Ω—Ç
                logger.warning(f"LLM success with unknown intent: {intent}")
                await handle_unknown_intent(message) # –ü–µ—Ä–µ–¥–∞–µ–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫—É –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö

        elif status == "clarification_needed":
             # –ü–µ—Ä–µ–¥–∞–µ–º state, —Ç.–∫. —ç—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–æ—á–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç —Å FSM
            await handle_clarification_request(message, llm_result)

        elif status == "unknown_intent":
            await handle_unknown_intent(message)
        elif status == "error":
            await handle_error_intent(message, llm_result)
        else:
            logger.error(f"Unexpected LLM status: {status}")
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.")

    except Exception as e:
        logger.exception(f"General error in handle_natural_language_query for user {user_telegram_id}")
        await message.reply("üí• –û–π! –ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.")