# src/utils/formatters.py
import logging
import pendulum
from typing import List, Optional
import datetime

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª—å Task –ò–ó models, –∞ –Ω–µ —á–µ—Ä–µ–∑ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
from src.database.models import Task

logger = logging.getLogger(__name__)

def format_reminder_time_human(
    reminder_datetime: Optional[datetime.datetime], # UTC
    timezone: str
    ) -> Optional[str]:
    """
    –ù–û–í–ê–Ø –£–ü–†–û–©–Å–ù–ù–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    –í—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è.
    """
    if not reminder_datetime:
        return None

    try:
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º UTC –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –∑–æ–Ω—É
        reminder_local = pendulum.instance(reminder_datetime).in_timezone(timezone)
        now_local = pendulum.now(timezone)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if reminder_local.is_same_day(now_local): 
            date_str = "—Å–µ–≥–æ–¥–Ω—è"
        elif reminder_local.is_same_day(now_local.add(days=1)): 
            date_str = "–∑–∞–≤—Ç—Ä–∞"
        elif reminder_local.is_same_day(now_local.subtract(days=1)): 
            date_str = "–≤—á–µ—Ä–∞"
        else:
            if now_local.start_of('week') <= reminder_local <= now_local.end_of('week').add(weeks=1):
                try:
                    with pendulum.locale('ru'): 
                        day_name = reminder_local.format("dddd").capitalize()
                    if not reminder_local.is_same_week(now_local): 
                        date_str = f"{day_name}, {reminder_local.format('D MMM')}"
                    else: 
                        date_str = day_name
                except Exception: 
                    date_str = reminder_local.format("ddd, DD.MM")
            else: 
                date_str = reminder_local.format("D MMMM YYYY", locale='ru')

        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è
        time_str = reminder_local.format(" –≤ HH:mm")
        
        return f"{date_str}{time_str}"

    except Exception as e:
        logger.error(f"Error formatting reminder time {reminder_datetime}: {e}", exc_info=True)
        return f"{reminder_datetime.strftime('%Y-%m-%d %H:%M')} UTC (–æ—à–∏–±–∫–∞)"


# –£–°–¢–ê–†–ï–í–®–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è - –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º
def format_datetime_human(
    date: Optional[datetime.date],
    date_time: Optional[datetime.datetime], # UTC
    has_time: bool,
    timezone: str
    ) -> Optional[str]:
    """
    –£–°–¢–ê–†–ï–í–®–ê–Ø —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–±—ã—Ç–∏—è.
    –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ format_reminder_time_human() –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
    """
    # –¢–µ–ø–µ—Ä—å –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None, —Ç–∞–∫ –∫–∞–∫ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
    return None

def format_task_list(tasks: List[Task], timezone: str, criteria_text: Optional[str] = None) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¢–ï–ö–°–¢–û–í–£–Æ —á–∞—Å—Ç—å —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ä–µ–¥–∫–æ, –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å - –∫–Ω–æ–ø–∫–∏)."""
    if not tasks:
        return "‚úÖ –ó–∞–¥–∞—á, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É, –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    title = f"**–ó–∞–¥–∞—á–∏ –ø–æ –∑–∞–ø—Ä–æ—Å—É '{criteria_text}':**\n" if criteria_text else "**–í–∞—à–∏ –∑–∞–¥–∞—á–∏:**\n"
    response_lines = [title]

    for task in tasks:
        # –ù–ï –≤—ã–≤–æ–¥–∏–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞ –∑–¥–µ—Å—å
        description_safe = task.description or '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'
        title_safe = task.title

        line = "\n‚Ä¢ " # –ú–∞—Ä–∫–µ—Ä —Å–ø–∏—Å–∫–∞
        if title_safe:
            line += f"<b>{title_safe}</b>: "
        line += f"<i>{description_safe}</i>"

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∏–∫–æ–Ω–∫–æ–π
        if task.next_reminder_at:
            formatted_reminder = format_reminder_time_human(
                reminder_datetime=task.next_reminder_at,
                timezone=timezone
            )
            if formatted_reminder:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                try:
                    import pendulum
                    now_local = pendulum.now(timezone)
                    reminder_local = pendulum.instance(task.next_reminder_at).in_timezone(timezone)
                    is_overdue = reminder_local < now_local
                    
                    # –í—ã–±–∏—Ä–∞–µ–º –∏–∫–æ–Ω–∫—É: –ø–µ—Ä–µ—á–µ—Ä–∫–Ω—É—Ç—ã–π –∫–æ–ª–æ–∫–æ–ª—å—á–∏–∫ –µ—Å–ª–∏ –≤—Ä–µ–º—è –ø—Ä–æ—à–ª–æ
                    reminder_icon = "üîï" if is_overdue else "üîî"
                    line += f" ({reminder_icon} <i>{formatted_reminder}</i>)"
                except Exception as e:
                    # Fallback –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    line += f" (üîî <i>{formatted_reminder}</i>)"
                    
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º RRULE –µ—Å–ª–∏ –µ—Å—Ç—å
        if task.recurrence_rule:
            line += f" ({task.recurrence_rule})"

        response_lines.append(line)

    return "\n".join(response_lines)