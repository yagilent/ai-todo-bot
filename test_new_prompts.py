# test_new_prompts.py - –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤

import asyncio
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

from src.llm.gemini_client import (
    test_detect_intent_simple,
    test_parse_task_simple, 
    test_parse_reminder_time_simple,
    test_complete_task_flow,
    run_all_tests,
    test_intent_only,
    test_parsing_only,
    test_time_parsing_only
)

async def quick_test():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤."""
    print("‚ö° –ë–´–°–¢–†–´–ô –¢–ï–°–¢ –ù–û–í–´–• –ü–†–û–ú–ü–¢–û–í")
    print("=" * 40)
    
    test_cases = [
        "–∫—É–ø–∏—Ç—å –º–æ–ª–æ–∫–æ –∑–∞–≤—Ç—Ä–∞",
        "–Ω–∞–ø–æ–º–Ω–∏ –≤–µ—á–µ—Ä–æ–º –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è –ø—Ä–æ –≤—Å—Ç—Ä–µ—á—É –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 10:00",
        "—Å–¥–µ–ª–∞—Ç—å –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∫ –ø—è—Ç–Ω–∏—Ü–µ"
    ]
    
    for text in test_cases:
        await test_complete_task_flow(text)

async def interactive_test():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç - –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–∫—Å—Ç."""
    print("üéÆ –ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –¢–ï–°–¢")
    print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–∏–ª–∏ 'quit' –¥–ª—è –≤—ã—Ö–æ–¥–∞):")
    
    while True:
        user_input = input("\n> ").strip()
        
        if user_input.lower() in ['quit', 'exit', 'q']:
            break
            
        if not user_input:
            continue
            
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —ç—Ç–æ —Ä–µ–ø–ª–∞–π –∏–ª–∏ –Ω–µ—Ç
        is_reply_input = input("–≠—Ç–æ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞? (y/n): ").strip().lower()
        is_reply = is_reply_input in ['y', 'yes', '–¥–∞']
        
        await test_complete_task_flow(user_input, is_reply)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –º–µ–Ω—é."""
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ù–û–í–´–• –ü–†–û–ú–ü–¢–û–í")
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç–µ—Å—Ç–∞:")
    print("1. –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç (–Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤)")
    print("2. –ü–æ–ª–Ω—ã–π —Ç–µ—Å—Ç (–≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–µ–π—Å—ã)")
    print("3. –¢–æ–ª—å–∫–æ –∏–Ω—Ç–µ–Ω—Ç—ã")
    print("4. –¢–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–¥–∞—á")  
    print("5. –¢–æ–ª—å–∫–æ –ø–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏")
    print("6. –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ç–µ—Å—Ç")
    print("q. –í—ã—Ö–æ–¥")
    
    choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é: ").strip()
    
    if choice == '1':
        await quick_test()
    elif choice == '2':
        await run_all_tests()
    elif choice == '3':
        await test_intent_only()
    elif choice == '4':
        await test_parsing_only()
    elif choice == '5':
        await test_time_parsing_only()
    elif choice == '6':
        await interactive_test()
    elif choice.lower() == 'q':
        print("–í—ã—Ö–æ–¥...")
        return
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        await main()

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\n\n–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()